# -*- coding: utf-8 -*-
"""unit_test_logistic_regression.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1M-eo8udviHLJ6gHjD4hAQ1011aQvU8yH
"""

import unittest
import pandas as pd
from sklearn.linear_model import LogisticRegression
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score, classification_report

class TestLogisticRegressionModel(unittest.TestCase):

    @classmethod
    def setUpClass(cls):
        """
        This method will run once to load the data
        load the data and split into train and test sets
        """
        # Load the dataset
        cls.data = pd.read_csv('data/diabetes.csv')

        # eparate features and target variable (Outcome)
        cls.x = cls.data.drop('Outcome', axis=1)
        cls.y = cls.data['Outcome']

        # split data into training and test sets 7:3
        cls.x_train, cls.x_test, cls.y_train, cls.y_test = train_test_split(
            cls.x, cls.y, test_size=0.3, random_state=42)

        # create logistic regression model with max_iter 1000
        cls.model = LogisticRegression(max_iter=1000)

    def test_data_loaded(self):
        """
        Test to check if data load is successful or not
        """
        # check if the data is loaded
        self.assertFalse(self.data.empty, "Dataset cannot be empty")

    def test_model_training(self):
        """
        Test to check if the model is successfully trained
        """
        # train the model
        self.model.fit(self.x_train, self.y_train)

        # check if the model coefficients are not none which indicates that the model is trained
        self.assertIsNotNone(self.model.coef_, "Model should be trained")

    def test_predictions(self):
        """
        Test to check if the model makes predictions on the test set
        """
        # Predict the Outcome on test data
        predictions = self.model.predict(self.x_test)

        # Check if the length of predictions is equal to the length of the test set
        self.assertEqual(len(predictions), len(self.y_test), "Number of predictions should match test set")

    def test_accuracy(self):
        """
        Test to check the accuracy score is computed correctly or not
        """
        # train the model and make predictions
        self.model.fit(self.x_train, self.y_train)
        predictions = self.model.predict(self.x_test)

        # calculate accuracy
        accuracy = accuracy_score(self.y_test, predictions)

        # check if the accuracy is valid (it should be between 0 and 1)
        self.assertGreaterEqual(accuracy, 0, "Accuracy should be >= 0")
        self.assertLessEqual(accuracy, 1, "Accuracy should be <= 1")

if __name__ == '__main__':
    unittest.main()

